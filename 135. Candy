There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.
You are giving candies to these children subjected to the following requirements:

Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
Return the minimum number of candies you need to have to distribute the candies to the children.

Example 1:
Input: ratings = [1,0,2]
Output: 5
Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.
if [1,2,3,4] no prob we cal it check rating[i-1]<rating[i] and calcul it
but if like arr[1,0,2] dec then inc or inc then dec in this case we iterate from left and right then cal max of these

 int candy(vector<int>& ratings) {
        int n=ratings.size();
       vector<int>left(n,1);
        int maxi=INT_MIN;
        for(int i=1;i<n;i++)
        {
            if(ratings[i]>ratings[i-1])
                left[i]=left[i-1]+1;
            cout<<left[i];
        }
        
         vector<int>right(n,1);
        for(int i=n-2;i>=0;i--)
        {
            if(ratings[i]>ratings[i+1])
                right[i]=right[i+1]+1;
            cout<<right[i];
        }
        int sum=0;
        for(int i=0;i<right.size();i++)
        {
            maxi=max(left[i],right[i]);
            sum+=maxi;
        }
        return sum;
    }
/*for example
1,2,6,5,4,3,1
intital=1,1,1,1,1,1,1
left[i]=1,2,3,1,1,1,1
right[i]=1,1,5,4,3,2,1 from right side*/
